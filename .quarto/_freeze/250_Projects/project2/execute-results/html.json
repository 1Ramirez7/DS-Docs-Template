{
  "hash": "7db40716d6ccd2d91787c26e3b46d03c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Client Report - [Late Flights & Missing Data (JSON)]\"\nsubtitle: \"Course DS 250\"\nauthor: \"[Erin Hu]\"\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    title-block-banner: true\n    toc: true\n    toc-depth: 3\n    toc-location: body\n    number-sections: false\n    html-math-method: katex\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n        source: false\n        toggle: true\n        caption: See code\nexecute: \n  warning: false\n    \n---\n\n\n## Elevator pitch\nMany travelers face flight delays, and my goal is to help them make more informed travel decisions. I analyze flight delay data to \nidentify the best months to fly and  uncover the main causes of delays, whether it's due to air carriers, weather, the national \naviation system, late-arriving aircraft, or security. This way, travelers can plan smarter and minimize disruptions.\n\n\n## Question|Task 1\n\n__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__\n\n::: {#fc5b8630 .cell execution_count=2}\n``` {.python .cell-code}\n# Include and execute your code here\n# flights.isna().sum()\n\n# Replace all variations of missing data with NaN\nflights.replace(['', ' ', None, 'missing', 'NA', 'NaN'], np.nan, inplace=True)\n\n# Reassign filled values instead of using inplace\nflights['minutes_delayed_carrier'] = flights['minutes_delayed_carrier'].fillna(flights['minutes_delayed_carrier'].median())\nflights['minutes_delayed_nas'] = flights['minutes_delayed_nas'].fillna(flights['minutes_delayed_nas'].median())\nflights['year'] = flights['year'].ffill()\n\n# Export one row of the data to JSON to show NaN values\njson_flight = flights.iloc[[0]].to_json(orient='records', date_format='iso', default_handler=str)\nprint(json_flight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"airport_code\":\"ATL\",\"airport_name\":\"Atlanta, GA: Hartsfield-Jackson Atlanta International\",\"month\":\"January\",\"year\":2005.0,\"num_of_flights_total\":35048,\"num_of_delays_carrier\":\"1500+\",\"num_of_delays_late_aircraft\":-999,\"num_of_delays_nas\":4598,\"num_of_delays_security\":10,\"num_of_delays_weather\":448,\"num_of_delays_total\":8355,\"minutes_delayed_carrier\":116423.0,\"minutes_delayed_late_aircraft\":104415,\"minutes_delayed_nas\":207467.0,\"minutes_delayed_security\":297,\"minutes_delayed_weather\":36931,\"minutes_delayed_total\":465533}]\n```\n:::\n:::\n\n\nThis task is to fix all the missing value in this data set, and also export the data into Json format\nwhich the row above shows an example.\n## Question|Task 2\n\n__Which airport has the worst delays?__\n\n::: {#cell-Q1-chart .cell execution_count=3}\n``` {.python .cell-code code-summary=\"plot example\"}\nsummary = flights.groupby('airport_code')[\n    ['num_of_flights_total', 'num_of_delays_total', 'minutes_delayed_total']\n].sum().reset_index()\n\nsummary['proportion_delayed'] = (\n    summary['num_of_delays_total'] / summary['num_of_flights_total']\n)\n\nsummary['avg_delay_hours'] = (\n    summary['minutes_delayed_total'] / summary['num_of_flights_total'] / 60\n)\nsummary\n```\n\n::: {#q1-chart .cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>airport_code</th>\n      <th>num_of_flights_total</th>\n      <th>num_of_delays_total</th>\n      <th>minutes_delayed_total</th>\n      <th>proportion_delayed</th>\n      <th>avg_delay_hours</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ATL</td>\n      <td>4430047</td>\n      <td>902443</td>\n      <td>53983926</td>\n      <td>0.203710</td>\n      <td>0.203098</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DEN</td>\n      <td>2513974</td>\n      <td>468519</td>\n      <td>25173381</td>\n      <td>0.186366</td>\n      <td>0.166890</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>IAD</td>\n      <td>851571</td>\n      <td>168467</td>\n      <td>10283478</td>\n      <td>0.197831</td>\n      <td>0.201265</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ORD</td>\n      <td>3597588</td>\n      <td>830825</td>\n      <td>56356129</td>\n      <td>0.230939</td>\n      <td>0.261083</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SAN</td>\n      <td>917862</td>\n      <td>175132</td>\n      <td>8276248</td>\n      <td>0.190804</td>\n      <td>0.150281</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>SFO</td>\n      <td>1630945</td>\n      <td>425604</td>\n      <td>26550493</td>\n      <td>0.260955</td>\n      <td>0.271320</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>SLC</td>\n      <td>1403384</td>\n      <td>205160</td>\n      <td>10123371</td>\n      <td>0.146189</td>\n      <td>0.120226</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis table lists the total number of flights, total number of delayed flights, the proportion of delayed\nflights, and the average delay time in hours for each airport. Based on the data, SFO appears to have the \nworst delays, as it has both the highest proportion of delayed flights and the longest average delay time.\n\n## Question|Task 3\n\n__What is the best month to fly if you want to avoid delays of any length?__\n\n::: {#cell-Q1-table .cell .tbl-cap-location-top tbl-cap='table example' execution_count=4}\n``` {.python .cell-code code-summary=\"table example\"}\n# flights_cleaned2 = flights_cleaned.dropna(subset=['month'])\n\n\n# Create the delay_ratio column\nflights['delay_ratio'] = flights['num_of_delays_total'] / flights['num_of_flights_total']\n\nflights['month'].replace('na', np.nan)  # Replace 'na' with NaN\nflights['month'].fillna(method='ffill')  # Forward fill NaN values\n\nfiltered_flights = flights.query('month in [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]')\n\n\n\n(\n  ggplot(filtered_flights) +\n  aes(x='month', y='delay_ratio') +\n  geom_boxplot()\n)\n\n# flights_cleaned[\"month\"].unique()\n```\n\n::: {#q1-table .cell-output .cell-output-display execution_count=4}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.1/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"sGhel6\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   var containerDiv = document.getElementById(\"sGhel6\");\n   var observer = new ResizeObserver(function(entries) {\n       for (let entry of entries) {\n           var width = containerDiv.clientWidth\n           if (entry.contentBoxSize && width > 0) {\n           \n               // Render plot\n               if (observer) {\n                   observer.disconnect();\n                   observer = null;\n               }\n\n               var plotSpec={\n\"data\":{\n},\n\"mapping\":{\n\"x\":\"month\",\n\"y\":\"delay_ratio\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"airport_code\"\n},{\n\"type\":\"str\",\n\"column\":\"airport_name\"\n},{\n\"type\":\"str\",\n\"column\":\"month\"\n},{\n\"type\":\"float\",\n\"column\":\"year\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_flights_total\"\n},{\n\"type\":\"str\",\n\"column\":\"num_of_delays_carrier\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_late_aircraft\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_nas\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_security\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_weather\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_total\"\n},{\n\"type\":\"float\",\n\"column\":\"minutes_delayed_carrier\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_late_aircraft\"\n},{\n\"type\":\"float\",\n\"column\":\"minutes_delayed_nas\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_security\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_weather\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_total\"\n},{\n\"type\":\"float\",\n\"column\":\"delay_ratio\"\n}]\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"boxplot\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"data\":{\n\"..middle..\":[0.21078502240855862,0.18639495110083346,0.17443174682908452,0.18213371664972128,0.23999531259155094,0.22149575590731818,0.19396195202646815,0.14287295929232766,0.1544548505033305,0.15336401049191206,0.24229995979091273],\n\"..lower..\":[0.164648591734667,0.1634244063940219,0.13712830772028736,0.15090246442207567,0.20123991341094577,0.18472399799877703,0.15894140337174778,0.1189740183414788,0.12137931034482759,0.12503757785404018,0.2014331452965391],\n\"..upper..\":[0.25016618657212497,0.22646015341920828,0.213647709843313,0.22664813957078894,0.279810703946218,0.2651928504233302,0.22848191756093222,0.19100561872783536,0.21048466864490603,0.19461574841723225,0.3070944419340262],\n\"..ymin..\":[0.1033384581594553,0.1023085528322994,0.08020326999558108,0.07546961325966851,0.10317544044730456,0.12215960734411925,0.10025109271831117,0.06460540127874798,0.06856927568993124,0.05982647296206618,0.10350421804023362],\n\"..ymax..\":[0.33380445365746414,0.3032349692283415,0.31531781226903177,0.3029327299625794,0.3950747724317295,0.369326667099539,0.3195162732822647,0.29420176807072285,0.33044185416101923,0.28462184090273246,0.41820645886358376],\n\"month\":[\"January\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n}\n},{\n\"geom\":\"point\",\n\"stat\":\"boxplot_outlier\",\n\"mapping\":{\n},\n\"show_legend\":false,\n\"data_meta\":{\n},\n\"data\":{\n\"..middle..\":[0.21078502240855862,0.21078502240855862,0.18639495110083346,0.18639495110083346,0.18639495110083346,0.17443174682908452,0.18213371664972128,0.23999531259155094,0.22149575590731818,0.19396195202646815,0.19396195202646815,0.14287295929232766,0.14287295929232766,0.1544548505033305,0.1544548505033305,0.15336401049191206,0.24229995979091273],\n\"..lower..\":[0.164648591734667,0.164648591734667,0.1634244063940219,0.1634244063940219,0.1634244063940219,0.13712830772028736,0.15090246442207567,0.20123991341094577,0.18472399799877703,0.15894140337174778,0.15894140337174778,0.1189740183414788,0.1189740183414788,0.12137931034482759,0.12137931034482759,0.12503757785404018,0.2014331452965391],\n\"..upper..\":[0.25016618657212497,0.25016618657212497,0.22646015341920828,0.22646015341920828,0.22646015341920828,0.213647709843313,0.22664813957078894,0.279810703946218,0.2651928504233302,0.22848191756093222,0.22848191756093222,0.19100561872783536,0.19100561872783536,0.21048466864490603,0.21048466864490603,0.19461574841723225,0.3070944419340262],\n\"..ymin..\":[0.1033384581594553,0.1033384581594553,0.1023085528322994,0.1023085528322994,0.1023085528322994,0.08020326999558108,0.07546961325966851,0.10317544044730456,0.12215960734411925,0.10025109271831117,0.10025109271831117,0.06460540127874798,0.06460540127874798,0.06856927568993124,0.06856927568993124,0.05982647296206618,0.10350421804023362],\n\"..ymax..\":[0.33380445365746414,0.33380445365746414,0.3032349692283415,0.3032349692283415,0.3032349692283415,0.31531781226903177,0.3029327299625794,0.3950747724317295,0.369326667099539,0.3195162732822647,0.3195162732822647,0.29420176807072285,0.29420176807072285,0.33044185416101923,0.33044185416101923,0.28462184090273246,0.41820645886358376],\n\"month\":[\"January\",\"January\",\"March\",\"March\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"August\",\"September\",\"September\",\"October\",\"October\",\"November\",\"December\"],\n\"delay_ratio\":[0.38037814003206843,0.4438581314878893,0.3755016417365925,0.32640922119148147,0.34191176470588236,NaN,NaN,NaN,NaN,0.33946576571820725,0.34959297066804496,0.364169222826252,0.31676536943034406,0.37830047273146544,0.3477004941087039,NaN,NaN]\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"1\"\n};\n       \n               var toolbar = null;\n               var plotContainer = containerDiv;               \n               \n               var options = {\n                   sizing: {\n                       width_mode: \"min\",\n                       height_mode: \"scaled\",\n                       width: width\n                   }\n               };\n               var fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer, options);\n               if (toolbar) {\n                 toolbar.bind(fig);\n               }\n               \n               break;\n           }\n       }\n   });\n   \n   observer.observe(containerDiv);\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\nI calculated the delay ratio by dividing the number of delayed flights by the total number of \nflights and then compared the results. From the boxplot, it appears that winter and summer have \nhigher delay ratios. This might be due to extreme weather conditions, such as snow in winter and \nstorms in summer.\n\n## Question|Task 4\n\n__According to the BTS website, the “Weather” category only accounts for severe weather delays. \nMild weather delays are not counted in the “Weather” category, but are actually included in both \nthe “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that \ncalculates the total number of flights delayed by weather (both severe and mild)__\n\n::: {#d765d8b1 .cell execution_count=5}\n``` {.python .cell-code}\nmean_delay_late_aircraft = flights1[flights['num_of_delays_late_aircraft'] != -999]['num_of_delays_late_aircraft'].mean()\n\nflights1['num_of_delays_late_aircraft'] = flights1['num_of_delays_late_aircraft'].replace(-999, mean_delay_late_aircraft)\n\n\nflights1['Mild_delay'] = flights1['num_of_delays_late_aircraft'] * 0.3\n\nflights1['weather_NAS'] = np.where(\n    flights1['month'].isin(['April', 'May', 'June', 'July', 'August']),\n    flights1['num_of_delays_nas'] * 0.4,  \n    flights1['num_of_delays_nas'] * 0.65  \n)\n\n\nflights1['weather_dealy_total'] = flights1['weather_NAS'] + flights1['Mild_delay'] + flights1['num_of_delays_weather']\nflights1['proportion_weather_total'] = flights1['weather_NAS'] / flights1['num_of_flights_total'] \n\n\n\nflights1_column = ['airport_code', 'weather_dealy_total','proportion_weather_total']\nflights1[flights1_column].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>airport_code</th>\n      <th>weather_dealy_total</th>\n      <th>proportion_weather_total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ATL</td>\n      <td>3769.431222</td>\n      <td>0.085274</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DEN</td>\n      <td>1119.150000</td>\n      <td>0.047903</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>IAD</td>\n      <td>960.150000</td>\n      <td>0.046987</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ORD</td>\n      <td>4502.250000</td>\n      <td>0.124840</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SAN</td>\n      <td>674.700000</td>\n      <td>0.056941</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom the table, I added columns to show the total number of flights delayed due to weather. \nLooking at the proportions, weather-related delays are not very high, so in the future, we \ncould conduct more analysis to identify other reasons for the delays.\n\n\n## Question|Task 5\n\n__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__\n\n::: {#6ad49a11 .cell execution_count=6}\n``` {.python .cell-code}\nsorted_data = flights1.sort_values(by='proportion_weather_total', ascending=False)\n\n# Create the plot\n(\nggplot(sorted_data) + \n    aes(x='airport_code', y='proportion_weather_total') + \n    geom_bar(stat='identity', width=0.9) + \n    ggtitle('Proportion Weather Total by Airport (Ordered)')\n    \n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.1/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"9gATyd\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   var containerDiv = document.getElementById(\"9gATyd\");\n   var observer = new ResizeObserver(function(entries) {\n       for (let entry of entries) {\n           var width = containerDiv.clientWidth\n           if (entry.contentBoxSize && width > 0) {\n           \n               // Render plot\n               if (observer) {\n                   observer.disconnect();\n                   observer = null;\n               }\n\n               var plotSpec={\n\"data\":{\n\"airport_coden\"proportion_weather_total\":[0.17790657439446367,0.1583279091632314,0.15458266773162938,0.1484004739336493,0.14403409090909092,0.13904997327632285,0.13760927404028886,0.13701977100859478,0.1356555941272015,0.13465894879765605,0.13305953128615344,0.132787020941975,0.13216591721434337,0.131759692513369,0.12746260488872674,0.12586222182817627,0.12484039157267504,0.12076743960415252,0.11847320431708225,0.11822925958965211,0.11772595098213756,0.11607142857142858,0.11311661669559728,0.11241624790619766,0.11145810742427528,0.11109959483652125,0.11048016765802694,0.11025424313509039,0.11007473209249859,0.10936789449749887,0.10876398261995007,0.10865022100884036,0.10804990943851882,0.10784103575409415,0.10682195648563363,0.10566085509657816,0.10516523149183628,0.10495278176965715,0.10480858051934723,0.10421184046257967,0.10156394398237009,0.10086489668900166,0.1000330605835193,0.09794873829550865,0.09638942617666021,0.09499896764298145,0.09492679287512824,0.09466282112274026,0.09450573127639403,0.09381086920392223,0.09309462915601023,0.0927602282215419,0.09263516389953172,0.09210013003901171,0.09103222379603398,0.09060635807596466,0.08949170201681923,0.0892738116119979,0.0891371641521909,0.08910943356384944,0.08897184632135635,0.08879443019421035,0.08841591735220969,0.08776074925500214,0.08695964899661944,0.08587756683456024,0.08546918996791304,0.08529336188436831,0.08527448071216617,0.08517066620462618,0.08486410496719776,0.08388316436762507,0.08376079475358743,0.0836615727623206,0.08329174428004077,0.08327192336035372,0.08323432343234324,0.08281982393963645,0.08198620078140154,0.08150732383214569,0.08138655462184874,0.08103092440331547,0.08073519521432869,0.08060369597435199,0.0805436616063319,0.08036150022593765,0.08012514898688916,0.07969561880018895,0.0793220338983051,0.07885487528344672,0.07841563055062167,0.07841263876040704,0.0783704786262331,0.07749200311230224,0.07725356354145754,0.07723160434258142,0.07710382038116786,0.0770380608122475,0.07670510889925443,0.0763740978145662,0.07610434297405376,0.07582864560796193,0.07554849381856173,0.07464845319405385,0.07446796228593419,0.07408960197801608,0.07397121083827266,0.07394073418841221,0.07376873661670236,0.07344618167721928,0.0730166868649203,0.07252904456389804,0.07247621624058795,0.0724601549283234,0.07162236987818382,0.07159914417834219,0.0714226351251076,0.07073406310367032,0.0705944306357164,0.07038704835424038,0.07007042253521127,0.0683172781307645,0.06818372924111836,0.0681758530183727,0.06786449028206377,0.06781831813070098,0.0671840354767184,0.06665902491211982,0.06599136847397973,0.06593378499296945,0.06545285647933116,0.06482014105039202,0.06472201446023436,0.06440849342770476,0.06432564841498559,0.0636588415847212,0.0635968760968761,0.06351501351928276,0.0634020618556701,0.06319600068953629,0.06275418752704123,0.06229629386253121,0.06218468552636496,0.061478056016054446,0.061289334447229185,0.06105829372029022,0.06100917431192661,0.06052016819809999,0.06039690579243025,0.06024833857992305,0.060217710182969196,0.06017809231247813,0.06005136207008647,0.0597680436188892,0.05914682972992648,0.058775157584871854,0.058578104138851804,0.058162962962962965,0.058020971791463594,0.05798816568047337,0.057912449518871215,0.05773436500831308,0.05730114186181536,0.05729047072330655,0.05715114255886788,0.0570283503119324,0.05696448917584505,0.05694082109021008,0.05686071513896632,0.0565382440836766,0.05637850243855791,0.056375327458918795,0.056313456681956406,0.05630676084762866,0.056206571158960286,0.05611547525530244,0.056057249957403306,0.055918399620463355,0.055820844045902054,0.05573897629071571,0.055688691524385575,0.055524136911362466,0.055523672883787664,0.05521759894931646,0.0551918055834505,0.055035511930412576,0.05483047757929275,0.054819126819126825,0.05481753449043169,0.054709038382170866,0.05463810432927172,0.054268587710338156,0.05404094010614102,0.05402289518551596,0.05381151069607259,0.05369649805447471,0.05359954770081247,0.05348518668831169,0.05339489819090153,0.0532634971796938,0.05299058284550777,0.05297540251824032,0.05291786743515851,0.052892666835828474,0.052880147667239516,0.0528194342843209,0.052763220581229155,0.05242706157838112,0.05220856687406798,0.05209709853490376,0.05192963681359107,0.051833995700045606,0.051829098017313606,0.05179927779853069,0.05147917690082419,0.05139358108108109,0.05138093512142081,0.05133144216691069,0.05121887439346835,0.05111182726393812,0.051030270686945954,0.05102156451021565,0.05070022067560686,0.05042267793807835,0.05027433105427535,0.05018356396498165,0.05016440971608387,0.050140785209584024,0.0500741066037218,0.05006231353147778,0.04984548472015566,0.04980690637771362,0.04974617041999941,0.04970433373835561,0.04966185752930568,0.04957842142243735,0.04950213371266003,0.049483686696693396,0.04936543767243542,0.049152939797174514,0.049009366519798085,0.04894544186857243,0.048816642802998404,0.04862843544886379,0.048454174513496547,0.0480632265000336,0.04799209486166008,0.04790336564987783,0.047881559942224365,0.04785531370038412,0.047811682650392325,0.04768981864700128,0.04751793032786886,0.047291021671826625,0.04725485679182985,0.0471529146719234,0.047134139045111885,0.04712952712320101,0.04708830246130424,0.04708016781948067,0.04698731927954123,0.04691501746216531,0.046844620736742865,0.0468,0.04676424490621366,0.04672361591695502,0.04658114256825076,0.04651949491120119,0.04646045630805303,0.046454391632056606,0.04643758493496409,0.04636644923900318,0.04636325743760746,0.04633602601762484,0.046171586715867165,0.045981545867879114,0.045924354013231805,0.04588326246617704,0.045774647887323945,0.04569685292228645,0.04544684579439253,0.04541216805509609,0.04523418123089347,0.04517501368939809,0.04508398494063134,0.04506293706293707,0.045020228974778344,0.044954191637390645,0.04490632318501171,0.044905496415381274,0.044897324206596145,0.04482739451887265,0.04478953412892595,0.04472714598685521,0.044713421146315414,0.04465413771320278,0.04458854407904894,0.0445638091125027,0.04454959053685169,0.04452264261909429,0.044456472023174265,0.04439117929050815,0.044336810730253355,0.044307932469935245,0.04404207162827853,0.04397261390496373,0.043943568549415786,0.04374915346065285,0.04371319709040527,0.04367946405565576,0.04356756756756757,0.04346191889218596,0.043400354596552115,0.0433966414900638,0.04335371741229482,0.043271141532347096,0.04311313185343675,0.04311211566189938,0.04301731996353692,0.04299581782603692,0.04294941804225045,0.042841319528052015,0.042824788964381306,0.042782865583456425,0.04277561923263721,0.04248853211009175,0.042303002591068437,0.04229375566176241,0.04228915662650602,0.04228592295052036,0.04227818545697131,0.042258340461933275,0.042228724459432654,0.042102189230943145,0.04194284073873242,0.04190512689490717,0.04188146754468486,0.04181371454098727,0.041767881241565455,0.04153491436100132,0.041524351676154335,0.041344757478942784,0.04133275261324042,0.04112337279691434,0.04101445323152441,0.040994386527666404,0.04092592592592593,0.04085305835481603,0.04085268214571658,0.04081609424351934,0.040680339034357506,0.040654718361375276,0.040547565413273264,0.04044092018124782,0.04038041668208563,0.04026092322157906,0.03986923017046782,0.0397293412333906,0.039630530637068576,0.03960971076780114,0.03955223880597015,0.03942648361381754,0.03940664301838117,0.03937995503490711,0.03925600880680081,0.03924871289645967,0.039210252857637684,0.03917833371585954,0.03914778795885098,0.03900532635759085,0.03885029940119761,0.03871729957805907,0.03847719645706112,0.038416738567730806,0.03830624016780283,0.03817397555715313,0.03817301601665008,0.03816819654427646,0.03813173652694611,0.03809895744897613,0.03806415516598284,0.03799966735044631,0.03778009798409766,0.0377612469004605,0.03775187672856579,0.03754810037396347,0.037535772690106294,0.03750528668962601,0.03750128323580741,0.037501117168647784,0.03742248929233523,0.037296003690675275,0.0371863216746847,0.03717882393516124,0.0371714795587281,0.03711869307503253,0.03709617801434169,0.03700867052023122,0.03694688391268743,0.036930693069306936,0.03688755727881565,0.03683500385505012,0.036649046932564475,0.03663937726479667,0.03653476189066801,0.03650838783053739,0.03644924452011066,0.036435124508519004,0.036361870538532515,0.036330275229357806,0.03630196260237985,0.036195601310248016,0.036165340141162336,0.03608452397466131,0.03608006238627502,0.03595846351773571,0.035899496966239695,0.03586805362407521,0.035780537176349735,0.035749767707812165,0.035636702182683354,0.03542303205377479,0.03537624230951254,0.03530992901482076,0.03530204197390811,0.035167638483965015,0.03513238289205703,0.03510992488237075,0.03500572925192339,0.03496031051187767,0.03481621882781433,0.034729351376574895,0.034700411648117095,0.0346761576971214,0.03455984103892418,0.034526236720678186,0.034435816787890705,0.034287646528403964,0.034240094618568896,0.034183911622841144,0.03415407212709211,0.0340950331265561,0.03407621247113164,0.03396561715279119,0.03395127930136357,0.033936475887240816,0.03391936796419368,0.03391304347826087,0.033905196350654504,0.033870713441072134,0.03385111182726394,0.03384233955034654,0.03380085130137465,0.033796362594873265,0.03379593432369039,0.03377079704486756,0.033720930232558136,0.03359349725008088,0.033572977290882114,0.03349528857479388,0.03333333333333333,0.03333172868627546,0.03331305865552441,0.03329231850940412,0.0332240099009901,0.03318925772245274,0.033116953762466005,0.03309791612171942,0.033049929148953903,0.03299638456430311,0.0329830104129727,0.03292362643134784,0.032904884318766064,0.032896341463414636,0.03280134569623369,0.032762733267854637,0.03251062438705459,0.03245911755630978,0.03233719122473657,0.03223140495867769,0.031989756151876186,0.03185808339429408,0.031751279863481224,0.03170446364290857,0.031660739137157876,0.03161873459326212,0.031537048377219844,0.03142795975165918,0.03133521019833613,0.03130245877357559,0.031207607394600347,0.031176944780330517,0.03115626511852927,0.031135831051130748,0.031079366230375986,0.03106332138590203,0.031041524846834583,0.030970149253731344,0.030947191953059512,0.030941510759210776,0.03090148359277936,0.030884602101731707,0.030877868720911573,0.03082418984434805,0.030774410774410777,0.03073376872839032,0.030645891984596968,0.030574562459168588,0.030549465607015623,0.03048776078388835,0.0304767412440814,0.030405440214311474,0.030402745995423343,0.030348391695625056,0.030305634635011014,0.030290996234166385,0.030275720531810477,0.030217606330365975,0.030115433270082228,0.029962625677738594,0.029958497160332026,0.029919896081402903,0.029903888160768895,0.029879752216688933,0.029855753102985574,0.029854904236796286,0.0298300283286119,0.029827351203998185,0.029691094314820903,0.029652124400097613,0.029613810286527854,0.029612340166429878,0.029594682700666477,0.02959242665125018,0.02957860615883306,0.029553508150248053,0.029520574861056532,0.02951421735017528,0.029444393084958862,0.029333333333333333,0.02905116233829394,0.029042029534267325,0.029005358842089445,0.029002192982456144,0.028988627132412674,0.028953270453777383,0.028854188426989762,0.028806707590956732,0.028785233225243203,0.028733711994654194,0.028709382397245534,0.028534415752655674,0.028429325335054486,0.028312967449699782,0.0283085416347186,0.028307928781862432,0.02814902424600828,0.028139165911151405,0.02810286992172941,0.027807486631016044,0.027806925498426022,0.02770193401592719,0.02766122303015854,0.02762780011487651,0.027589691763516926,0.0275566023400699,0.02750235217485706,0.027463203463203464,0.02744658065174155,0.02743848283788726,0.027372184483375046,0.027336578839793377,0.02730301665916254,0.027249357326478152,0.027245596582596992,0.027223088923556942,0.027183591795897948,0.027147446736557324,0.026958140729327174,0.026952931461601985,0.026951042171594764,0.02693756727664155,0.026919484401270316,0.026871440195280715,0.02687029659141213,0.0267628464905171,0.026705183758626225,0.026681379310344828,0.02665973418256264,0.026640531028645255,0.02663287639672849,0.026569872958257714,0.026564172423859105,0.026542876955081285,0.02653703404873326,0.026521811245646044,0.026509626885827836,0.026486203544455248,0.026433251433251433,0.026310326933056565,0.026284584980237155,0.02628001812415043,0.026278240190249706,0.026240869076606103,0.02620075906294988,0.026124042214833023,0.026070111960677225,0.026068244697202585,0.026056851311953354,0.02598664497902577,0.025971922246220303,0.025925215723873445,0.025921295077652017,0.025902272389722265,0.02589074673903528,0.025821292502336283,0.025746714456391876,0.02569345755039739,0.025677419354838714,0.02567651632970451,0.025594182334161053,0.025542949756888172,0.02553707974268722,0.025418994413407822,0.02540910961288893,0.02534072188108432,0.025265643447461628,0.02523422860712055,0.025223570744171194,0.025155166119021542,0.02504917274094643,0.02501212611156023,0.024998734881837965,0.024981870920957217,0.024872640095894516,0.024815270935960594,0.02480035492457853,0.024624897699372556,0.024545072052172084,0.02450028555111365,0.024477771826459563,0.024443428869883137,0.024406492248062017,0.024291099819701692,0.024157748711850974,0.024016176699331156,0.02400030641948828,0.023937536026830162,0.023935241521612614,0.02376841036058913,0.02368464052287582,0.023674498995655626,0.02364767494991389,0.0236347876336319,0.023631743549648164,0.02356963298139769,0.02348532660145156,0.023472699810393037,0.023429481507697754,0.02340880727402389,0.02336566677535051,0.023308121019108282,0.02328733962720891,0.023279119434861183,0.02326023652463303,0.023240589198036007,0.023237391074729337,0.02316205533596838,0.02312227506936187,0.023090969455511288,0.023029869717190978,0.022971204188481677,0.022858333333333335,0.022813782193880073,0.022779304029304028,0.022774795139870022,0.02277095963329883,0.022759502499128212,0.022655601659751036,0.022636652702770908,0.022626582278481012,0.022625400213447174,0.022398055630569808,0.022389103402146487,0.022388993120700442,0.022302192716478885,0.022271880819366853,0.02220944214984054,0.02220435049019608,0.022155688622754494,0.022056807051909894,0.022055932153652025,0.022028773023000093,0.022011348072784192,0.022008655804480654,0.021987842261131606,0.021875473030929918,0.021874380820289283,0.02186251114114028,0.021839248617491296,0.02183919207613129,0.021777185253883606,0.021714285714285714,0.02170421155729677,0.021666666666666667,0.02160404624277457,0.021541570438799076,0.021397756686798965,0.0213703550214118,0.02134229329703981,0.02132298043900254,0.021307809505086747,0.021294193966915342,0.02113295532828149,0.02112467439603657,0.021108580106302205,0.02109189957366177,0.021038585838801294,0.020978377549455605,0.020831070070613796,0.020769427402862986,0.020723724087768215,0.020682314716262393,0.020646692376149512,0.020552147239263803,0.020540590292691906,0.020445208751313653,0.020438709677419356,0.0204283153558288,0.020352989788088072,0.020327993897787947,0.02022708310661298,0.020184612101163162,0.02014174387924158,0.020077716422707222,0.019870304661690933,0.019792170130497826,0.019772677355589723,0.01975934135528816,0.019531839919456333,0.01948671360436066,0.019426789782947596,0.01934846989141165,0.019336219336219335,0.019333646175504458,0.019316493313521546,0.019288146586670992,0.019231512185699108,0.01922699787546985,0.019204005743529325,0.019189504697315028,0.019183023872679048,0.019179794948737183,0.01916516154926751,0.019119347664936993,0.01911764705882353,0.01908963304591939,0.019078854893876215,0.019043254081924952,0.019025974025974026,0.018953503104016216,0.018895877009084558,0.018836133660562585,0.018746109381947536,0.01863979848866499,0.018453825857519788,0.018447412353923207,0.018443106140267024,0.01827846364883402,0.018272863041377492,0.01826507250063597,0.018252582569474755,0.018159828821285702,0.01807599029911075,0.018000622858922455,0.01792063717821078,0.017860235003092147,0.01784188034188034,0.017826136951647215,0.01775182481751825,0.017542020046260605,0.017528089887640447,0.01746044825313118,0.017449664429530203,0.017402309761113746,0.017389309474650148,0.017354098921786753,0.017318435754189943,0.017268751012473677,0.017167381974248927,0.01715656868626275,0.017152347878604864,0.017125767354005984,0.017124174942939982,0.017085592245769672,0.01708306294613887,0.01700886891021747,0.017003009027081243,0.017000710732054017,0.016895719975318337,0.016888791785012017,0.01688865210442195,0.01682795698924731,0.01682782870777345,0.016776770625288064,0.01677184125648577,0.016749585406301823,0.016740975118653818,0.016710684273709486,0.01669223688247929,0.016579659098056483,0.016576194889447903,0.016520140664961637,0.01645933014354067,0.01643646408839779,0.016407791984896596,0.016276202219482123,0.01625754527162978,0.016243005595523583,0.01614862646382839,0.01602280826799715,0.016007668344116942,0.01593104851011899,0.01588296760710554,0.015869817900038746,0.01576354679802956,0.015741430700447093,0.015737522591408315,0.01568488289567069,0.015602836879432624,0.015486385595081248,0.015365932642487047,0.015318645571491943,0.015244419327493642,0.015199916483975362,0.015144600195594469,0.015122470713525028,0.01510235026535254,0.015093594502803885,0.014765587240212664,0.014668894556327501,0.014635508798063497,0.01457272825733781,0.014510150787633729,0.014374225526641886,0.01436674073207812,0.014338085539714867,0.014277909306137317,0.01424601510067114,0.014165773490532333,0.01399500178507676,0.013978660893768364,0.013977673325499413,0.013908981314044605,0.013779179810725552,0.01376648440012866,0.01376320780276348,0.013759973945611464,0.013756613756613757,0.01355820649938297,0.013540445486518171,0.013491452333281997,0.013419721310020415,0.013279445727482679,0.013263525305410123,0.013138474895094778,0.013049054184033345,0.013019434349818297,0.012936024255045479,0.012795905310300703,0.012704495210022109,0.012668857247170501,0.012538177141938596,0.012527131782945738,0.012393102481424367,0.01234540389972145,0.012281706269682223,0.0122337870296237,0.012203956533853443,0.012049616066154756,0.012044926413632842,0.012000605326876513,0.011999417504004661,0.011946241911398706,0.011766440578000591,0.011744707154999227,0.011565175254401552,0.011283958967421938,0.011235194585448393,0.011196464274439651,0.011170152628603732,0.011131276467029645,0.011125057051574624,0.011087420042643924,0.010910366602350466,0.01086082910321489,0.010516252390057362,0.01047495768196754,0.010457025161433979,0.01039931501517864,0.010326195717430459,0.010129669283844874,0.010030978020356985,0.00999083409715857,0.009955302722470541,0.009896405587819809,0.009841224431411815,0.0096821721742791,0.00967300380228137,0.009592326139088728,0.009370950054830027,0.009036723706979426,0.008980185420832577,0.00873978494623656,0.008359836437982736,0.00833211944646759,0.008227268098971592,0.008208798147758366,0.008113383688364595,0.007328187482563007,0.00730034813798924,0.007102005975245412,0.006981882456915599,0.006674033149171271]\n},\n\"mapping\":{\n\"x\":\"airport_code\",\n\"y\":\"proportion_weather_total\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"airport_code\"\n},{\n\"type\":\"str\",\n\"column\":\"airport_name\"\n},{\n\"type\":\"str\",\n\"column\":\"month\"\n},{\n\"type\":\"float\",\n\"column\":\"year\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_flights_total\"\n},{\n\"type\":\"str\",\n\"column\":\"num_of_delays_carrier\"\n},{\n\"type\":\"float\",\n\"column\":\"num_of_delays_late_aircraft\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_nas\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_security\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_weather\"\n},{\n\"type\":\"int\",\n\"column\":\"num_of_delays_total\"\n},{\n\"type\":\"float\",\n\"column\":\"minutes_delayed_carrier\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_late_aircraft\"\n},{\n\"type\":\"float\",\n\"column\":\"minutes_delayed_nas\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_security\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_weather\"\n},{\n\"type\":\"int\",\n\"column\":\"minutes_delayed_total\"\n},{\n\"type\":\"float\",\n\"column\":\"Mild_delay\"\n},{\n\"type\":\"float\",\n\"column\":\"weather_NAS\"\n},{\n\"type\":\"float\",\n\"column\":\"weather_dealy_total\"\n},{\n\"type\":\"float\",\n\"column\":\"proportion_weather_total\"\n}]\n},\n\"ggtitle\":{\n\"text\":\"Proportion Weather Total by Airport (Ordered)\"\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"width\":0.9,\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"2\"\n};\n       \n               var toolbar = null;\n               var plotContainer = containerDiv;               \n               \n               var options = {\n                   sizing: {\n                       width_mode: \"min\",\n                       height_mode: \"scaled\",\n                       width: width\n                   }\n               };\n               var fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer, options);\n               if (toolbar) {\n                 toolbar.bind(fig);\n               }\n               \n               break;\n           }\n       }\n   });\n   \n   observer.observe(containerDiv);\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\nThis bar chart is based on the calculations from question 4. As we can see, SFO has the highest probability of weather delays. In the future, we could break down the data by month to identify which months and airports experience the most weather delays.\n\n\n\n\n## Question|Stretch\n\n__Which delay is the worst delay? Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.__\n\n::: {#81703a14 .cell execution_count=7}\n``` {.python .cell-code}\nmean_delay_late_aircraft = flights[flights['num_of_delays_late_aircraft'] != -999]['num_of_delays_late_aircraft'].mean()\n\nflights['num_of_delays_late_aircraft'] = flights['num_of_delays_late_aircraft'].replace(-999, mean_delay_late_aircraft)\n\n\nflights['Mild_delay'] = flights['num_of_delays_late_aircraft'] * 0.3\n\nflights['weather_NAS'] = np.where(\n    flights['month'].isin(['April', 'May', 'June', 'July', 'August']),\n    flights['num_of_delays_nas'] * 0.4,  \n    flights['num_of_delays_nas'] * 0.65  \n)\n\n\nflights['weather_dealy_total'] = flights['weather_NAS'] + flights['Mild_delay'] + flights['num_of_delays_weather']\n\n\nflights['num_of_delays_carrier'] = pd.to_numeric(flights['num_of_delays_carrier'], errors='coerce')\nflights['num_of_delays_security'] = pd.to_numeric(flights['num_of_delays_security'], errors='coerce')\nflights['num_of_flights_total'] = pd.to_numeric(flights['num_of_flights_total'], errors='coerce')\n\n\ngrouped_flights = flights.groupby(['airport_code'], as_index=False).agg({\n  \"num_of_delays_carrier\":\"sum\",\n  \"num_of_delays_security\":\"sum\",\n  \"weather_dealy_total\":\"sum\",\n  \"num_of_flights_total\":\"sum\"\n})\n\ngrouped_flights['proportion_weather_total'] = grouped_flights['weather_dealy_total'] / grouped_flights['num_of_flights_total'] \ngrouped_flights['carrier_delay'] = grouped_flights['num_of_delays_carrier'] / grouped_flights['num_of_flights_total']\ngrouped_flights['security_delay'] = grouped_flights['num_of_delays_security'] / grouped_flights['num_of_flights_total']\n\n\nflights_column = ['airport_code', 'weather_dealy_total','proportion_weather_total', 'carrier_delay', 'security_delay']\n\n\n\n\nweather_data = pd.DataFrame({\n    'airport_code': grouped_flights['airport_code'],\n    'proportion': grouped_flights['proportion_weather_total'],\n    'category': 'weather'\n})\n\ncarrier_data = pd.DataFrame({\n    'airport_code': grouped_flights['airport_code'],\n    'proportion': grouped_flights['carrier_delay'],\n    'category': 'carrier'\n})\n\nsecurity_data = pd.DataFrame({\n    'airport_code': grouped_flights['airport_code'],\n    'proportion': grouped_flights['security_delay'],\n    'category': 'security'\n})\n\nfulldata = pd.concat([weather_data, carrier_data, security_data])\n\n\n\n\n# Plot with ggplot2\n(\n    ggplot(fulldata) + \n    geom_bar(mapping=aes(x='airport_code', y='proportion', fill='category'), stat='identity',position = \"dodge\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.1/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"DFokCg\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   var containerDiv = document.getElementById(\"DFokCg\");\n   var observer = new ResizeObserver(function(entries) {\n       for (let entry of entries) {\n           var width = containerDiv.clientWidth\n           if (entry.contentBoxSize && width > 0) {\n           \n               // Render plot\n               if (observer) {\n                   observer.disconnect();\n                   observer = null;\n               }\n\n               var plotSpec={\n\"data\":{\n\"airport_code\":[\"ATL\",\"DEN\",\"IAD\",\"ORD\",\"SAN\",\"SFO\",\"SLC\",\"ATL\",\"DEN\",\"IAD\",\"ORD\",\"SAN\",\"SFO\",\"SLC\",\"ATL\",\"DEN\",\"IAD\",\"ORD\",\"SAN\",\"SFO\",\"SLC\"],\n\"proportion\":[0.07106033502170529,0.05931125381567193,0.05970453432538215,0.08615607870797819,0.053298371650640296,0.0978535143735687,0.043000169590076555,0.02179999444701151,0.04490301013455191,0.05608575209818089,0.03446503601857689,0.06224247217991376,0.05298584562937438,0.04527128711742474,1.8803412243707573E-4,3.9180993916404863E-4,3.194096558008669E-4,2.3960497978089764E-4,5.338493150386441E-4,4.273595982697148E-4,6.177924217462932E-4],\n\"category\":[\"weather\",\"weather\",\"weather\",\"weather\",\"weather\",\"weather\",\"weather\",\"carrier\",\"carrier\",\"carrier\",\"carrier\",\"carrier\",\"carrier\",\"carrier\",\"security\",\"security\",\"security\",\"security\",\"security\",\"security\",\"security\"]\n},\n\"mapping\":{\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"airport_code\"\n},{\n\"type\":\"float\",\n\"column\":\"proportion\"\n},{\n\"type\":\"str\",\n\"column\":\"category\"\n}]\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n\"x\":\"airport_code\",\n\"y\":\"proportion\",\n\"fill\":\"category\"\n},\n\"position\":\"dodge\",\n\"data_meta\":{\n},\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"3\"\n};\n       \n               var toolbar = null;\n               var plotContainer = containerDiv;               \n               \n               var options = {\n                   sizing: {\n                       width_mode: \"min\",\n                       height_mode: \"scaled\",\n                       width: width\n                   }\n               };\n               var fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer, options);\n               if (toolbar) {\n                 toolbar.bind(fig);\n               }\n               \n               break;\n           }\n       }\n   });\n   \n   observer.observe(containerDiv);\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\nThis chart shows the reasons for delays, categorized by carrier, security, and weather. From the graph, we can see that weather and carrier delays have higher probabilities, while security delays are almost negligible. For future analysis, we could examine which of these three delay types is most prevalent each month.\n\n",
    "supporting": [
      "project2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}